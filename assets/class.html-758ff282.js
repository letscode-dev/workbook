import{_ as p,o,c as e,f as a,a as n,b as s,e as t}from"./app-1d00ddda.js";const c={},x=n("h1",{id:"классы",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#классы","aria-hidden":"true"},"#"),s(" Классы")],-1),l=n("ul",null,[n("li",null,[n("code",null,"Класс"),s(" - функция/шаблон, предназначенный для создания объектов и методов")]),n("li",null,[n("code",null,"Конструктор"),s(" - метод, который вызывается в момент создания объекта т.е. когда используется ключевое слово new он создает свойства и инициализирует, т.е. подготавливает объект к использованию")]),n("li",null,[n("code",null,"this"),s(" - ссылка на текущий контекст вызова (на текущий объект с которым произошло событие)")])],-1),u=n("h3",{id:"создание-класса",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#создание-класса","aria-hidden":"true"},"#"),s(" Создание класса")],-1),i=t(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Создание класса</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">authorizate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Создание экземпляра класса (объекта)</span>
<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;Tony&#39;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre></div>`,1),k=n("h3",{id:"наследование",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#наследование","aria-hidden":"true"},"#"),s(" Наследование")],-1),r=t(`<ul><li>Если у подкласса нет конструктора, он будет использовать конструктор родителя</li><li>Если подклассу указать конструктор, то он должен вызывать в начале конструктор родительского класса <code>super()</code></li><li>Метод <code>super()</code> позволяет наследовать свойства и методы из прототипа</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
	<span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">&#39;Tony&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
admin<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// =&gt; &quot;Tony&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; Object { name: &quot;Tony&quot; }</span>
</code></pre></div>`,2);function d(m,h){return o(),e("div",null,[x,l,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),u,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),i,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),k,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),r])}const g=p(c,[["render",d],["__file","class.html.vue"]]);export{g as default};
