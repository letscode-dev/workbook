import{_ as s,o as a,c as n,a as l}from"./app-FeruXpGT.js";const p={},e=l(`<h1 id="классы" tabindex="-1"><a class="header-anchor" href="#классы"><span>Классы</span></a></h1><ul><li><code>Класс</code> - функция/шаблон, предназначенный для создания объектов и методов</li><li><code>Конструктор</code> - метод, который вызывается в момент создания объекта т.е. когда используется ключевое слово new он создает свойства и инициализирует, т.е. подготавливает объект к использованию</li><li><code>this</code> - ссылка на текущий контекст вызова (на текущий объект с которым произошло событие)</li></ul><h3 id="создание-класса" tabindex="-1"><a class="header-anchor" href="#создание-класса"><span>Создание класса</span></a></h3><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Создание класса</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	constructor</span><span style="color:#383A42;">(name, age) {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">age</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> age;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">	authorizate</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Hello&#39;</span><span style="color:#0184BC;"> +</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Создание экземпляра класса (объекта)</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> user</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> User</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Tony&#39;</span><span style="color:#383A42;">, </span><span style="color:#986801;">25</span><span style="color:#383A42;">);</span></span></span></code></pre></div><h3 id="наследование" tabindex="-1"><a class="header-anchor" href="#наследование"><span>Наследование</span></a></h3><ul><li>Если у подкласса нет конструктора, он будет использовать конструктор родителя</li><li>Если подклассу указать конструктор, то он должен вызывать в начале конструктор родительского класса <code>super()</code></li><li>Метод <code>super()</code> позволяет наследовать свойства и методы из прототипа</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	constructor</span><span style="color:#383A42;">(name) {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">		this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">	getName</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Admin</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	constructor</span><span style="color:#383A42;">(name) {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">		super</span><span style="color:#383A42;">(name);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> admin</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Admin</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Tony&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">admin.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">();    </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; &quot;Tony&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(admin); </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; Object { name: &quot;Tony&quot; }</span></span></span></code></pre></div>`,7),o=[e];function c(t,r){return a(),n("div",null,o)}const y=s(p,[["render",c],["__file","class.html.vue"]]),A=JSON.parse('{"path":"/themes/learn/js/paradigms/class.html","title":"Классы","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Создание класса","slug":"создание-класса","link":"#создание-класса","children":[]},{"level":3,"title":"Наследование","slug":"наследование","link":"#наследование","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/js/paradigms/class.md"}');export{y as comp,A as data};
