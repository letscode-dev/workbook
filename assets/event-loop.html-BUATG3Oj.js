import{_ as s,o as a,c as n,a as l}from"./app-DHIW3TM2.js";const p="/workbook/assets/event-loop-BT1SMYL_.png",e={},o=l(`<h1 id="event-loop" tabindex="-1"><a class="header-anchor" href="#event-loop"><span>Event Loop</span></a></h1><ul><li><a href="https://developer.mozilla.org/ru/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener noreferrer">Статья на MDN</a></li><li><a href="https://habr.com/ru/post/461401/" target="_blank" rel="noopener noreferrer">Статья на Habr</a></li><li><a href="https://medium.com/@stasonmars/%D0%BF%D0%BE%D0%BB%D0%BD%D0%BE%D0%B5-%D0%BF%D0%BE%D0%BD%D0%B8%D0%BC%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE-%D0%B8-%D0%B0%D1%81%D0%B8%D0%BD%D1%85%D1%80%D0%BE%D0%BD%D0%BD%D0%BE%D0%B3%D0%BE-javascript-%D1%81-async-await-ba5f47f4436" target="_blank" rel="noopener noreferrer">Статья на Medium</a></li></ul><h3 id="описание" tabindex="-1"><a class="header-anchor" href="#описание"><span>Описание</span></a></h3><ul><li>Движок браузера выполняет JavaScript в одном потоке. Он не может поставить обработку события на паузу, переключиться на другое событие, а после возобновить выполнение первого. Все события обрабатываются последовательно и каждое до конца</li></ul><ol><li>Сначала выполняется синхронный код</li><li>Потом выполняется асинхронный код: setTimeout, AJAX-запросы к серверу и т.д.</li></ol><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">setTimeout</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">() { </span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">2</span><span style="color:#383A42;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}, </span><span style="color:#986801;">0</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#986801;">3</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// =&gt; 1, 3, 2</span></span></span></code></pre></div><img src="`+p+`" style="width:500px;"><h3 id="эволюция-методов-по-работе-с-асинхронным-кодом" tabindex="-1"><a class="header-anchor" href="#эволюция-методов-по-работе-с-асинхронным-кодом"><span>Эволюция методов по работе с асинхронным кодом</span></a></h3><h4 id="_1-callback-функции" tabindex="-1"><a class="header-anchor" href="#_1-callback-функции"><span>1. Callback-функции</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#4078F2;">setTimeout</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">	// Асинхронный код</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}, </span><span style="color:#986801;">1000</span><span style="color:#383A42;">);</span></span></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#383A42;">element.</span><span style="color:#4078F2;">addEventListener</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;click&#39;</span><span style="color:#383A42;">, </span><span style="color:#A626A4;">function</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">	// Асинхронный код</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">})</span></span></span></code></pre></div><h4 id="_2-promise" tabindex="-1"><a class="header-anchor" href="#_2-promise"><span>2. Promise</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#4078F2;">fetch</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;url&#39;</span><span style="color:#383A42;">)</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    .</span><span style="color:#4078F2;">then</span><span style="color:#383A42;">(res </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> res.</span><span style="color:#4078F2;">json</span><span style="color:#383A42;">())</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    .</span><span style="color:#4078F2;">then</span><span style="color:#383A42;">(body </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(body))</span></span></span></code></pre></div><h4 id="_3-генераторы" tabindex="-1"><a class="header-anchor" href="#_3-генераторы"><span>3. Генераторы</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> getApi</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> response</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> yield</span><span style="color:#4078F2;"> fetch</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;url&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> data</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> yield</span><span style="color:#383A42;"> response.</span><span style="color:#4078F2;">json</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	return</span><span style="color:#383A42;"> data;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span></code></pre></div><h4 id="_4-асинхронные-функции" tabindex="-1"><a class="header-anchor" href="#_4-асинхронные-функции"><span>4. Асинхронные функции</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">async</span><span style="color:#A626A4;"> function</span><span style="color:#4078F2;"> getApi</span><span style="color:#383A42;">(id) {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> response</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> await</span><span style="color:#4078F2;"> fetch</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;url&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    const</span><span style="color:#986801;"> data</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> await</span><span style="color:#383A42;"> response.</span><span style="color:#4078F2;">json</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> data;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span></code></pre></div>`,17),t=[o];function c(r,i){return a(),n("div",null,t)}const y=s(e,[["render",c],["__file","event-loop.html.vue"]]),d=JSON.parse('{"path":"/themes/learn/js/async/event-loop.html","title":"Event Loop","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Описание","slug":"описание","link":"#описание","children":[]},{"level":3,"title":"Эволюция методов по работе с асинхронным кодом","slug":"эволюция-методов-по-работе-с-асинхронным-кодом","link":"#эволюция-методов-по-работе-с-асинхронным-кодом","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/js/async/event-loop.md"}');export{y as comp,d as data};
