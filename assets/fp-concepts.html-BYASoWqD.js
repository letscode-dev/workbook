import{_ as e,r as o,o as l,c as u,d as p,w as a,a as n,e as s,b as c}from"./app-CmK3LxqM.js";const i={},k=n("h1",{id:"концепции-функционального-программирования",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#концепции-функционального-программирования"},[n("span",null,"Концепции функционального программирования")])],-1),r=n("h3",{id:"чистые-функции",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#чистые-функции"},[n("span",null,"Чистые функции")])],-1),d=n("ul",null,[n("li",null,[n("code",null,"Чистые функции"),s(" (pure functions) - возвращает один и тот же результат для одинаковых входных данных")])],-1),m=n("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Чистая функция")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("	rerturn a "),n("span",{class:"token operator"},"+"),s(" b"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])])],-1),h=n("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token comment"},"// Обычная функция")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"let"),s(" current "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"77"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"function"),s(),n("span",{class:"token function"},"sum"),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},[s("a"),n("span",{class:"token punctuation"},","),s(" b")]),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("	rerturn a "),n("span",{class:"token operator"},"+"),s(" b "),n("span",{class:"token operator"},"+"),s(" current"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}")]),s(`
`),n("span",{class:"line"})])])],-1),g=c(`<h3 id="функции-первого-класса" tabindex="-1"><a class="header-anchor" href="#функции-первого-класса"><span>Функции первого класса</span></a></h3><ul><li><code>Функции первого класса</code> - функция трактуются как объект, то есть может быть передана другим функциям и ее можно вернуть из функций. Так же ее можно присваивать переменным</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// Передача функции в качестве аргумента</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">functionInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token function">functionInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span>getInfo<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// Возврат функции из функции</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">functionInfo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token comment">// Присвоение функции в переменную</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre></div><h3 id="иммутабельность" tabindex="-1"><a class="header-anchor" href="#иммутабельность"><span>Иммутабельность</span></a></h3><ul><li><code>Иммутабельность</code> - свойство объектов не изменяться (н-р строка. строку нельзя поменять на месте, для изменения нужно создать новую строку). Применяется для списков, словарей и т.д. Иммутабельный список - список в который нельзя добавить / удалить элемент, можно только итерироваться по ним. Можно создать новый список который содежит все элементы +1, при этом старый остается валадным</li></ul>`,7),f=n("h5",{id:"иммутабельно",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#иммутабельно"},[n("span",null,"Иммутабельно")])],-1),j=n("ul",null,[n("li",null,[n("code",null,"map"),s(" - создаёт новый массив с результатом вызова указанной функции для каждого элемента массива")])],-1),v=n("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" numbers "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token number"},"1"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"3"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" doubles "),n("span",{class:"token operator"},"="),s(" numbers"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),n("span",{class:"token parameter"},"num"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"=>"),s(),n("span",{class:"token punctuation"},"{")]),s(`
`),n("span",{class:"line"},[s("	"),n("span",{class:"token keyword"},"return"),s(" num "),n("span",{class:"token operator"},"*"),s(),n("span",{class:"token number"},"2"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("numbers"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// => [1, 2, 3]")]),s(`
`),n("span",{class:"line"},[s("console"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"log"),n("span",{class:"token punctuation"},"("),s("doubles"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token comment"},"// => [2, 4, 6]")]),s(`
`),n("span",{class:"line"})])])],-1),_=n("h5",{id:"не-иммутабельно",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#не-иммутабельно"},[n("span",null,"Не иммутабельно")])],-1),b=n("ul",null,[n("li",null,[n("code",null,"push"),s(", "),n("code",null,"unshift"),s(", "),n("code",null,"pop"),s(", "),n("code",null,"shift"),s(" изменяют существующий массив")])],-1),w=n("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[n("pre",{class:"language-javascript"},[n("code",null,[n("span",{class:"line"},[n("span",{class:"token keyword"},"const"),s(" arr "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token punctuation"},"["),n("span",{class:"token string"},"'Tony'"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token string"},"'Kate'"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"}),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Добавление нового элемента в конец массива")]),s(`
`),n("span",{class:"line"},[s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"push"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Jack'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Добавление нового элемента в начало массива")]),s(`
`),n("span",{class:"line"},[s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unshift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},"'Jack'"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Удаление элемента из конца массива")]),s(`
`),n("span",{class:"line"},[s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pop"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"},[n("span",{class:"token comment"},"// Удаление элемента из начала массива")]),s(`
`),n("span",{class:"line"},[s("arr"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"shift"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";")]),s(`
`),n("span",{class:"line"})])])],-1),x=c(`<h3 id="каррирование-функции" tabindex="-1"><a class="header-anchor" href="#каррирование-функции"><span>Каррирование функций</span></a></h3><ul><li><code>Каррирование функций</code> - все функции могут быть от одного аргумента. Преобразование функции от пары аргументов в функцию, берущую свои аргументы по одному</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> a <span class="token operator">*</span> b <span class="token operator">*</span> c</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 6</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//const mul1 = multiply(1);</span></span>
<span class="line"><span class="token comment">//const mul2 = mul1(2);</span></span>
<span class="line"><span class="token comment">//const result = mul2(3);</span></span>
<span class="line"><span class="token comment">//log(result); // 6</span></span>
<span class="line"></span></code></pre></div><h3 id="рекурсия" tabindex="-1"><a class="header-anchor" href="#рекурсия"><span>Рекурсия</span></a></h3><ul><li><code>Рекурсия</code> - рекурсивные функции вызывают сами себя, позволяя операции выполняться снова и снова</li></ul><h5 id="пример-возведения-в-степень-через-рекурсию" tabindex="-1"><a class="header-anchor" href="#пример-возведения-в-степень-через-рекурсию"><span>Пример возведения в степень через рекурсию</span></a></h5><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">function</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token comment">// пока n != 1, сводить вычисление pow(x,n) к pow(x,n-1)</span></span>
<span class="line">	<span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token keyword">return</span> x<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 8</span></span>
<span class="line"></span></code></pre></div>`,7);function y(I,N){const t=o("v-two");return l(),u("div",null,[k,r,d,p(t,null,{first:a(()=>[m]),last:a(()=>[h]),_:1}),g,p(t,null,{first:a(()=>[f,j,v]),last:a(()=>[_,b,w]),_:1}),x])}const B=e(i,[["render",y],["__file","fp-concepts.html.vue"]]),C=JSON.parse('{"path":"/themes/learn/js/paradigms/fp-concepts.html","title":"Концепции функционального программирования","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Чистые функции","slug":"чистые-функции","link":"#чистые-функции","children":[]},{"level":3,"title":"Функции первого класса","slug":"функции-первого-класса","link":"#функции-первого-класса","children":[]},{"level":3,"title":"Иммутабельность","slug":"иммутабельность","link":"#иммутабельность","children":[]},{"level":3,"title":"Каррирование функций","slug":"каррирование-функции","link":"#каррирование-функции","children":[]},{"level":3,"title":"Рекурсия","slug":"рекурсия","link":"#рекурсия","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/js/paradigms/fp-concepts.md"}');export{B as comp,C as data};
