import{_ as e,r as c,o as t,c as r,d as p,w as a,b as s,e as n,a as o}from"./app-D3qzlGYu.js";const i={},A=s("h1",{id:"концепции-функционального-программирования",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#концепции-функционального-программирования"},[s("span",null,"Концепции функционального программирования")])],-1),y=s("h3",{id:"чистые-функции",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#чистые-функции"},[s("span",null,"Чистые функции")])],-1),d=s("ul",null,[s("li",null,[s("code",null,"Чистые функции"),n(" (pure functions) - возвращает один и тот же результат для одинаковых входных данных")])],-1),u=s("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-javascript"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// Чистая функция")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"function"),s("span",{style:{color:"#4078F2"}}," sum"),s("span",{style:{color:"#383A42"}},"(a, b) {")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"	rerturn a "),s("span",{style:{color:"#0184BC"}},"+"),s("span",{style:{color:"#383A42"}}," b;")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"}")])])])])],-1),h=s("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-javascript"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// Обычная функция")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"let"),s("span",{style:{color:"#383A42"}}," current "),s("span",{style:{color:"#0184BC"}},"="),s("span",{style:{color:"#986801"}}," 77"),s("span",{style:{color:"#383A42"}},";")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"function"),s("span",{style:{color:"#4078F2"}}," sum"),s("span",{style:{color:"#383A42"}},"(a, b) {")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"	rerturn a "),s("span",{style:{color:"#0184BC"}},"+"),s("span",{style:{color:"#383A42"}}," b "),s("span",{style:{color:"#0184BC"}},"+"),s("span",{style:{color:"#383A42"}}," current;")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"}")])])])])],-1),g=o(`<h3 id="функции-первого-класса" tabindex="-1"><a class="header-anchor" href="#функции-первого-класса"><span>Функции первого класса</span></a></h3><ul><li><code>Функции первого класса</code> - функция трактуются как объект, то есть может быть передана другим функциям и ее можно вернуть из функций. Так же ее можно присваивать переменным</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Передача функции в качестве аргумента</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> getInfo</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Hello&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> foo</span><span style="color:#383A42;">(functionInfo) {</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">	functionInfo</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">foo</span><span style="color:#383A42;">(getInfo);</span></span></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Возврат функции из функции</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> foo</span><span style="color:#383A42;">(functionInfo) {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	return</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">		console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Hello&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> result</span><span style="color:#0184BC;"> =</span><span style="color:#4078F2;"> foo</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">result</span><span style="color:#383A42;">();</span></span></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Присвоение функции в переменную</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#4078F2;"> foo</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> function</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Hello&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">foo</span><span style="color:#383A42;">();</span></span></span></code></pre></div><h3 id="иммутабельность" tabindex="-1"><a class="header-anchor" href="#иммутабельность"><span>Иммутабельность</span></a></h3><ul><li><code>Иммутабельность</code> - свойство объектов не изменяться (н-р строка. строку нельзя поменять на месте, для изменения нужно создать новую строку). Применяется для списков, словарей и т.д. Иммутабельный список - список в который нельзя добавить / удалить элемент, можно только итерироваться по ним. Можно создать новый список который содежит все элементы +1, при этом старый остается валадным</li></ul>`,7),f=s("h5",{id:"иммутабельно",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#иммутабельно"},[s("span",null,"Иммутабельно")])],-1),F=s("ul",null,[s("li",null,[s("code",null,"map"),n(" - создаёт новый массив с результатом вызова указанной функции для каждого элемента массива")])],-1),v=s("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-javascript"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"const"),s("span",{style:{color:"#986801"}}," numbers"),s("span",{style:{color:"#0184BC"}}," ="),s("span",{style:{color:"#383A42"}}," ["),s("span",{style:{color:"#986801"}},"1"),s("span",{style:{color:"#383A42"}},", "),s("span",{style:{color:"#986801"}},"2"),s("span",{style:{color:"#383A42"}},", "),s("span",{style:{color:"#986801"}},"3"),s("span",{style:{color:"#383A42"}},"];")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"const"),s("span",{style:{color:"#986801"}}," doubles"),s("span",{style:{color:"#0184BC"}}," ="),s("span",{style:{color:"#383A42"}}," numbers."),s("span",{style:{color:"#4078F2"}},"map"),s("span",{style:{color:"#383A42"}},"((num) "),s("span",{style:{color:"#A626A4"}},"=>"),s("span",{style:{color:"#383A42"}}," {")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"	return"),s("span",{style:{color:"#383A42"}}," num "),s("span",{style:{color:"#0184BC"}},"*"),s("span",{style:{color:"#986801"}}," 2"),s("span",{style:{color:"#383A42"}},";")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"});")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"console."),s("span",{style:{color:"#4078F2"}},"log"),s("span",{style:{color:"#383A42"}},"(numbers); "),s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// => [1, 2, 3]")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"console."),s("span",{style:{color:"#4078F2"}},"log"),s("span",{style:{color:"#383A42"}},"(doubles); "),s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// => [2, 4, 6]")])])])])],-1),j=s("h5",{id:"не-иммутабельно",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#не-иммутабельно"},[s("span",null,"Не иммутабельно")])],-1),m=s("ul",null,[s("li",null,[s("code",null,"push"),n(", "),s("code",null,"unshift"),n(", "),s("code",null,"pop"),n(", "),s("code",null,"shift"),n(" изменяют существующий массив")])],-1),_=s("div",{class:"language-javascript","data-highlighter":"prismjs","data-ext":"js","data-title":"js"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-javascript"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A626A4"}},"const"),s("span",{style:{color:"#986801"}}," arr"),s("span",{style:{color:"#0184BC"}}," ="),s("span",{style:{color:"#383A42"}}," ["),s("span",{style:{color:"#50A14F"}},"'Tony'"),s("span",{style:{color:"#383A42"}},", "),s("span",{style:{color:"#50A14F"}},"'Kate'"),s("span",{style:{color:"#383A42"}},"];")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// Добавление нового элемента в конец массива")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"arr."),s("span",{style:{color:"#4078F2"}},"push"),s("span",{style:{color:"#383A42"}},"("),s("span",{style:{color:"#50A14F"}},"'Jack'"),s("span",{style:{color:"#383A42"}},");")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// Добавление нового элемента в начало массива")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"arr."),s("span",{style:{color:"#4078F2"}},"unshift"),s("span",{style:{color:"#383A42"}},"("),s("span",{style:{color:"#50A14F"}},"'Jack'"),s("span",{style:{color:"#383A42"}},");")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// Удаление элемента из конца массива")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"arr."),s("span",{style:{color:"#4078F2"}},"pop"),s("span",{style:{color:"#383A42"}},"();")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"// Удаление элемента из начала массива")])]),n(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#383A42"}},"arr."),s("span",{style:{color:"#4078F2"}},"shift"),s("span",{style:{color:"#383A42"}},"();")])])])])],-1),b=o(`<h3 id="каррирование-функции" tabindex="-1"><a class="header-anchor" href="#каррирование-функции"><span>Каррирование функций</span></a></h3><ul><li><code>Каррирование функций</code> - все функции могут быть от одного аргумента. Преобразование функции от пары аргументов в функцию, берущую свои аргументы по одному</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> multiply</span><span style="color:#383A42;">(a) {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    return</span><span style="color:#383A42;"> (b) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">        return</span><span style="color:#383A42;"> (c) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">            return</span><span style="color:#383A42;"> a </span><span style="color:#0184BC;">*</span><span style="color:#383A42;"> b </span><span style="color:#0184BC;">*</span><span style="color:#383A42;"> c</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">        }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">multiply</span><span style="color:#383A42;">(</span><span style="color:#986801;">1</span><span style="color:#383A42;">)(</span><span style="color:#986801;">2</span><span style="color:#383A42;">)(</span><span style="color:#986801;">3</span><span style="color:#383A42;">)) </span><span style="color:#A0A1A7;font-style:italic;">// 6</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">//const mul1 = multiply(1);</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">//const mul2 = mul1(2);</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">//const result = mul2(3);</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">//log(result); // 6</span></span></span></code></pre></div><h3 id="рекурсия" tabindex="-1"><a class="header-anchor" href="#рекурсия"><span>Рекурсия</span></a></h3><ul><li><code>Рекурсия</code> - рекурсивные функции вызывают сами себя, позволяя операции выполняться снова и снова</li></ul><h5 id="пример-возведения-в-степень-через-рекурсию" tabindex="-1"><a class="header-anchor" href="#пример-возведения-в-степень-через-рекурсию"><span>Пример возведения в степень через рекурсию</span></a></h5><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> pow</span><span style="color:#383A42;">(x, n) {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">	// пока n != 1, сводить вычисление pow(x,n) к pow(x,n-1)</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	if</span><span style="color:#383A42;"> (n </span><span style="color:#0184BC;">!=</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">		return</span><span style="color:#383A42;"> x </span><span style="color:#0184BC;">*</span><span style="color:#4078F2;"> pow</span><span style="color:#383A42;">(x, n </span><span style="color:#0184BC;">-</span><span style="color:#986801;"> 1</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	} </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">		return</span><span style="color:#383A42;"> x;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	}</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#4078F2;">pow</span><span style="color:#383A42;">(</span><span style="color:#986801;">2</span><span style="color:#383A42;">, </span><span style="color:#986801;">3</span><span style="color:#383A42;">)); </span><span style="color:#A0A1A7;font-style:italic;">// 8</span></span></span></code></pre></div>`,7);function x(k,B){const l=c("v-two");return t(),r("div",null,[A,y,d,p(l,null,{first:a(()=>[u]),last:a(()=>[h]),_:1}),g,p(l,null,{first:a(()=>[f,F,v]),last:a(()=>[j,m,_]),_:1}),b])}const w=e(i,[["render",x],["__file","fp-concepts.html.vue"]]),I=JSON.parse('{"path":"/themes/learn/js/paradigms/fp-concepts.html","title":"Концепции функционального программирования","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Чистые функции","slug":"чистые-функции","link":"#чистые-функции","children":[]},{"level":3,"title":"Функции первого класса","slug":"функции-первого-класса","link":"#функции-первого-класса","children":[]},{"level":3,"title":"Иммутабельность","slug":"иммутабельность","link":"#иммутабельность","children":[]},{"level":3,"title":"Каррирование функций","slug":"каррирование-функции","link":"#каррирование-функции","children":[]},{"level":3,"title":"Рекурсия","slug":"рекурсия","link":"#рекурсия","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/js/paradigms/fp-concepts.md"}');export{w as comp,I as data};
