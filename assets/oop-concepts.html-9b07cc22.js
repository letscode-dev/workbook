import{_ as p,o,c as e,f as a,a as n,b as s,e as t}from"./app-c2f9ed6e.js";const c="/workbook/assets/polymorphism-8e14feb1.png",x={},l=n("h1",{id:"объектно-ориентированное-программирование",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#объектно-ориентированное-программирование","aria-hidden":"true"},"#"),s(" Объектно-ориентированное программирование")],-1),u=n("ul",null,[n("li",null,[n("code",null,"Объектно-ориентированное программирование"),s(" - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования")])],-1),k=n("h3",{id:"_1-инкапсуляция",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-инкапсуляция","aria-hidden":"true"},"#"),s(" 1. Инкапсуляция")],-1),i=n("ul",null,[n("li",null,[n("code",null,"Инкапсуляция"),s(" – отделение и защита внутреннего интерфейса от внешнего")]),n("li",null,[n("code",null,"Внутренний интерфейс"),s(" – приватные свойства и методы, доступ к которым может быть осуществлен только из других методов класса")]),n("li",null,[n("code",null,"Внешний интерфейс"),s(" – публичные свойства и методы класса, предоставляющие доступ к внутренней реализации")]),n("li",null,"Мы обращаемся с объектами как с единой сущностью, а не как с набором отдельных полей и методов, тем самым скрываем и защищаем реализацию класса. Если клиентский код не знает ничего, кроме публичного интерфейса, он не может зависеть от деталей реализации")],-1),r=n("h4",{id:"геттеры-и-сеттеры",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#геттеры-и-сеттеры","aria-hidden":"true"},"#"),s(" Геттеры и Сеттеры")],-1),d=t(`<ul><li><code>Геттеры и Сеттеры (Аксессоры)</code> - доступ к свойствам класса</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> <span class="token string">&#39;Tony&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Jack&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> name <span class="token operator">=</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// =&gt; Jack</span>
</code></pre></div>`,2),m=n("h3",{id:"_2-наследование",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-наследование","aria-hidden":"true"},"#"),s(" 2. Наследование")],-1),h=t(`<ul><li><code>Наследование</code> - описание нового класса на основе уже существующего с частично или полностью заимствующейся функциональностью</li><li><code>SuperClass</code> - базовый, родительский, предок, надкласс, супер класс</li><li><code>SubClass</code> - наследник, дочерний, потомок, подкласс, суб класс, производный</li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Admin</span> <span class="token keyword">extends</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> admin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Admin</span><span class="token punctuation">(</span><span class="token string">&#39;Tony&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
admin<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// =&gt; &quot;Tony&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>admin<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; Object { name: &quot;Tony&quot; }</span>
</code></pre></div>`,2),_=n("h3",{id:"_3-полиморфизм",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-полиморфизм","aria-hidden":"true"},"#"),s(" 3. Полиморфизм")],-1),w=t('<ul><li><code>Полиморфизм</code> (&quot;множество форм&quot;) - возможность единообразно обрабатывать объекты с различной реализацией при условии наличия общего интерфейса. <u>«Один интерфейс, множество реализаций»</u></li><li>Позволяет одно и то же имя (например имя метода) использовать для решения внешне схожих, но технически разных задач</li></ul><hr><ul><li><code>Абстрактный метод</code> - метод без реализации</li><li><code>Абстрактный класс</code> - если в классе есть хотя бы 1 абстрактный метод, класс является абстрактным, следовательно мы не можем создать экземпляр класса и воспользоваться им, пока не переопределим этот метод, добавляя различную реализацию в подклассах</li></ul><blockquote><p>«Один интерфейс, множество реализаций». Интерфейс - метод draw(). У него есть несколько вариантов реализаций</p></blockquote><img src="'+c+`" style="width:550px;"><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Нет реализации</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Своя реализация для Circle</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Своя реализация для Square</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Triangle</span> <span class="token keyword">extends</span> <span class="token class-name">Shape</span> <span class="token punctuation">{</span>
    <span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Своя реализация для Triangle</span>
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>

<span class="token keyword">const</span> circle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> square <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> triangle <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Triangle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

circle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
square<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
triangle<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,6),y=n("h3",{id:"_4-абстракция",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_4-абстракция","aria-hidden":"true"},"#"),s(" 4. Абстракция")],-1),f=n("ul",null,[n("li",null,[n("code",null,"Абстракция"),s(" способ представления объекта в программе, позволяющий работать с объектами не вдаваясь в особенности их реализации")]),n("li",null,"Инкапсуляция помогает реализовать абстракцию. Можно абстрагировать внутренне устройство класса")],-1);function g(v,b){return o(),e("div",null,[l,u,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),k,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),i,a("---------------------------------------------------------"),r,a("---------------------------------------------------------"),d,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),m,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),h,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),_,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),w,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),y,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),f])}const j=p(x,[["render",g],["__file","oop-concepts.html.vue"]]);export{j as default};
