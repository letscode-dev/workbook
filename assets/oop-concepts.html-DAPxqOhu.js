import{_ as s,o as n,c as a,a as l}from"./app-CQgiRq2t.js";const p="/workbook/assets/polymorphism-J0ynoBlB.png",e={},o=l(`<h1 id="объектно-ориентированное-программирование" tabindex="-1"><a class="header-anchor" href="#объектно-ориентированное-программирование"><span>Объектно-ориентированное программирование</span></a></h1><ul><li><code>Объектно-ориентированное программирование</code> - методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определённого класса, а классы образуют иерархию наследования</li></ul><h3 id="_1-инкапсуляция" tabindex="-1"><a class="header-anchor" href="#_1-инкапсуляция"><span>1. Инкапсуляция</span></a></h3><ul><li><code>Инкапсуляция</code> – отделение и защита внутреннего интерфейса от внешнего</li><li><code>Внутренний интерфейс</code> – приватные свойства и методы, доступ к которым может быть осуществлен только из других методов класса</li><li><code>Внешний интерфейс</code> – публичные свойства и методы класса, предоставляющие доступ к внутренней реализации</li><li>Мы обращаемся с объектами как с единой сущностью, а не как с набором отдельных полей и методов, тем самым скрываем и защищаем реализацию класса. Если клиентский код не знает ничего, кроме публичного интерфейса, он не может зависеть от деталей реализации</li></ul><h4 id="геттеры-и-сеттеры" tabindex="-1"><a class="header-anchor" href="#геттеры-и-сеттеры"><span>Геттеры и Сеттеры</span></a></h4><ul><li><code>Геттеры и Сеттеры (Аксессоры)</code> - доступ к свойствам класса</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;Tony&#39;</span><span style="color:#383A42;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#0184BC;">    get</span><span style="color:#4078F2;"> name</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">        return</span><span style="color:#E45649;"> this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_name</span><span style="color:#383A42;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#0184BC;">    set</span><span style="color:#4078F2;"> name</span><span style="color:#383A42;">(value) {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">_name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> value;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> user</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> User</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">user.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#50A14F;"> &#39;Jack&#39;</span><span style="color:#383A42;">;</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> user.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">; </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; Jack</span></span></span></code></pre></div><h3 id="_2-наследование" tabindex="-1"><a class="header-anchor" href="#_2-наследование"><span>2. Наследование</span></a></h3><ul><li><code>Наследование</code> - описание нового класса на основе уже существующего с частично или полностью заимствующейся функциональностью</li><li><code>SuperClass</code> - базовый, родительский, предок, надкласс, супер класс</li><li><code>SubClass</code> - наследник, дочерний, потомок, подкласс, суб класс, производный</li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(name) {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">        this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#0184BC;"> =</span><span style="color:#383A42;"> name;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">    getName</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(</span><span style="color:#E45649;">this</span><span style="color:#383A42;">.</span><span style="color:#E45649;">name</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Admin</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> User</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    constructor</span><span style="color:#383A42;">(name) {</span></span></span>
<span class="line"><span class="line"><span style="color:#E45649;">        super</span><span style="color:#383A42;">(name);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> admin</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Admin</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Tony&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">admin.</span><span style="color:#4078F2;">getName</span><span style="color:#383A42;">();    </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; &quot;Tony&quot;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(admin); </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; Object { name: &quot;Tony&quot; }</span></span></span></code></pre></div><h3 id="_3-полиморфизм" tabindex="-1"><a class="header-anchor" href="#_3-полиморфизм"><span>3. Полиморфизм</span></a></h3><ul><li><code>Полиморфизм</code> (&quot;множество форм&quot;) - возможность единообразно обрабатывать объекты с различной реализацией при условии наличия общего интерфейса. <u>«Один интерфейс, множество реализаций»</u></li><li>Позволяет одно и то же имя (например имя метода) использовать для решения внешне схожих, но технически разных задач</li></ul><hr><ul><li><code>Абстрактный метод</code> - метод без реализации</li><li><code>Абстрактный класс</code> - если в классе есть хотя бы 1 абстрактный метод, класс является абстрактным, следовательно мы не можем создать экземпляр класса и воспользоваться им, пока не переопределим этот метод, добавляя различную реализацию в подклассах</li></ul><blockquote><p>«Один интерфейс, множество реализаций». Интерфейс - метод draw(). У него есть несколько вариантов реализаций</p></blockquote><img src="`+p+`" style="width:550px;"><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Shape</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">    draw</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">        // Нет реализации</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Circle</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Shape</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">    draw</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">        // Своя реализация для Circle</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }  </span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Square</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Shape</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">    draw</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">        // Своя реализация для Square</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }  </span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">class</span><span style="color:#C18401;"> Triangle</span><span style="color:#A626A4;"> extends</span><span style="color:#C18401;"> Shape</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">    draw</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">        // Своя реализация для Triangle</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }  </span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> circle</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Circle</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> square</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Square</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">const</span><span style="color:#986801;"> triangle</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Triangle</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">circle.</span><span style="color:#4078F2;">draw</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">square.</span><span style="color:#4078F2;">draw</span><span style="color:#383A42;">();</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">triangle.</span><span style="color:#4078F2;">draw</span><span style="color:#383A42;">();</span></span></span></code></pre></div><h3 id="_4-абстракция" tabindex="-1"><a class="header-anchor" href="#_4-абстракция"><span>4. Абстракция</span></a></h3><ul><li><code>Абстракция</code> способ представления объекта в программе, позволяющий работать с объектами не вдаваясь в особенности их реализации</li><li>Инкапсуляция помогает реализовать абстракцию. Можно абстрагировать внутренне устройство класса</li></ul>`,19),c=[o];function t(r,i){return n(),a("div",null,c)}const A=s(e,[["render",t],["__file","oop-concepts.html.vue"]]),d=JSON.parse('{"path":"/themes/learn/js/paradigms/oop-concepts.html","title":"Объектно-ориентированное программирование","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"1. Инкапсуляция","slug":"_1-инкапсуляция","link":"#_1-инкапсуляция","children":[]},{"level":3,"title":"2. Наследование","slug":"_2-наследование","link":"#_2-наследование","children":[]},{"level":3,"title":"3. Полиморфизм","slug":"_3-полиморфизм","link":"#_3-полиморфизм","children":[]},{"level":3,"title":"4. Абстракция","slug":"_4-абстракция","link":"#_4-абстракция","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/js/paradigms/oop-concepts.md"}');export{A as comp,d as data};
