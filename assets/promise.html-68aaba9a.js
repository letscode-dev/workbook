import{_ as o,r as c,o as l,c as u,a as n,b as s,d as p,f as a,e as t}from"./app-c2f9ed6e.js";const x={},r=n("h1",{id:"promise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise","aria-hidden":"true"},"#"),s(" Promise")],-1),i={href:"https://learn.javascript.ru/promise-basics",target:"_blank",rel:"noopener noreferrer"},k={href:"https://www.youtube.com/watch?v=1idOY3C1gYU",target:"_blank",rel:"noopener noreferrer"},d=n("h3",{id:"описание",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#описание","aria-hidden":"true"},"#"),s(" Описание")],-1),m=n("ul",null,[n("li",null,[n("code",null,"Promise"),s(" - специальный объект, который используются для обработки результатов асинхронных операций. Промис хранит своё состояние, текущий результат (если есть) и коллбэки")])],-1),h=n("h4",{id:"состояния-promise",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#состояния-promise","aria-hidden":"true"},"#"),s(" Состояния Promise")],-1),g=n("ul",null,[n("li",null,[n("code",null,"pending"),s(" - ожидание (выполняется)")]),n("li",null,[n("code",null,"fulfilled"),s(" - выполнено успешно")]),n("li",null,[n("code",null,"rejected"),s(" - отклонено (выполнено с ошибкой)")])],-1),_=n("h4",{id:"навешиваемые-коллбэки",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#навешиваемые-коллбэки","aria-hidden":"true"},"#"),s(" Навешиваемые коллбэки")],-1),f=t(`<ul><li><code>onFulfilled</code> – срабатывают, когда promise в состоянии <code>fulfilled</code></li><li><code>onRejected</code> – срабатывают, когда promise в состоянии <code>rejected</code></li></ul><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">resolve</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token comment">// =&gt; onFulfilled(arg) =&gt; .then(arg)  =&gt; Promise</span>
	<span class="token function">reject</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>  <span class="token comment">// =&gt; onRejected(arg)  =&gt; .catch(arg) =&gt; Promise</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,2),v=n("h3",{id:"объявление",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#объявление","aria-hidden":"true"},"#"),s(" Объявление")],-1),j=n("h4",{id:"promise-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#promise-1","aria-hidden":"true"},"#"),s(" Promise")],-1),w=t(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Объявление</span>
<span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token comment">// onResolved()</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    	<span class="token comment">// onRejected()</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Api error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Аналогично с throw</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Api error&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// Аналогично с reject</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Использование</span>
promise
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,2),y=n("h4",{id:"функция",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#функция","aria-hidden":"true"},"#"),s(" Функция")],-1),b=t(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Объявление</span>
<span class="token keyword">function</span> <span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token comment">//</span>
	<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> promise<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Использование</span>
<span class="token function">asyncFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,2);function P(E,N){const e=c("ExternalLinkIcon");return l(),u("div",null,[r,n("ul",null,[n("li",null,[n("a",i,[s("Promise"),p(e)])]),n("li",null,[n("a",k,[s("YouTube"),p(e)])])]),a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),d,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),m,a("---------------------------------------------------------"),h,a("---------------------------------------------------------"),g,a("---------------------------------------------------------"),_,a("---------------------------------------------------------"),f,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),v,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),a("---------------------------------------------------------"),j,a("---------------------------------------------------------"),w,a("---------------------------------------------------------"),y,a("---------------------------------------------------------"),b])}const F=o(x,[["render",P],["__file","promise.html.vue"]]);export{F as default};
