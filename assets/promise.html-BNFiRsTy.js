import{_ as s,o as a,c as n,a as l}from"./app-Ceu6k_v6.js";const e={},p=l(`<h1 id="promise" tabindex="-1"><a class="header-anchor" href="#promise"><span>Promise</span></a></h1><ul><li><a href="https://learn.javascript.ru/promise-basics" target="_blank" rel="noopener noreferrer">Promise</a></li><li><a href="https://www.youtube.com/watch?v=1idOY3C1gYU" target="_blank" rel="noopener noreferrer">YouTube</a></li></ul><h3 id="описание" tabindex="-1"><a class="header-anchor" href="#описание"><span>Описание</span></a></h3><ul><li><code>Promise</code> - специальный объект, который используются для обработки результатов асинхронных операций. Промис хранит своё состояние, текущий результат (если есть) и коллбэки</li></ul><h4 id="состояния-promise" tabindex="-1"><a class="header-anchor" href="#состояния-promise"><span>Состояния Promise</span></a></h4><ul><li><code>pending</code> - ожидание (выполняется)</li><li><code>fulfilled</code> - выполнено успешно</li><li><code>rejected</code> - отклонено (выполнено с ошибкой)</li></ul><h4 id="навешиваемые-коллбэки" tabindex="-1"><a class="header-anchor" href="#навешиваемые-коллбэки"><span>Навешиваемые коллбэки</span></a></h4><ul><li><code>onFulfilled</code> – срабатывают, когда promise в состоянии <code>fulfilled</code></li><li><code>onRejected</code> – срабатывают, когда promise в состоянии <code>rejected</code></li></ul><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> promise </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#C18401;"> Promise</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">function</span><span style="color:#383A42;">(resolve, reject) {</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">	resolve</span><span style="color:#383A42;">(arg) </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; onFulfilled(arg) =&gt; .then(arg)  =&gt; Promise</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">	reject</span><span style="color:#383A42;">(arg)  </span><span style="color:#A0A1A7;font-style:italic;">// =&gt; onRejected(arg)  =&gt; .catch(arg) =&gt; Promise</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">});</span></span></span></code></pre></div><h3 id="объявление" tabindex="-1"><a class="header-anchor" href="#объявление"><span>Объявление</span></a></h3><h4 id="promise-1" tabindex="-1"><a class="header-anchor" href="#promise-1"><span>Promise</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Объявление</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">let</span><span style="color:#383A42;"> promise </span><span style="color:#0184BC;">=</span><span style="color:#A626A4;"> new</span><span style="color:#C18401;"> Promise</span><span style="color:#383A42;">((resolve, reject) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">    if</span><span style="color:#383A42;"> (</span><span style="color:#0184BC;">...</span><span style="color:#383A42;">) {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">    	// onResolved()</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">        resolve</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;ok&#39;</span><span style="color:#383A42;">);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    } </span><span style="color:#A626A4;">else</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">    	// onRejected()</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">        reject</span><span style="color:#383A42;">(</span><span style="color:#A626A4;">new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Api error&#39;</span><span style="color:#383A42;">)); </span><span style="color:#A0A1A7;font-style:italic;">// Аналогично с throw</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">        throw</span><span style="color:#A626A4;"> new</span><span style="color:#4078F2;"> Error</span><span style="color:#383A42;">(</span><span style="color:#50A14F;">&#39;Api error&#39;</span><span style="color:#383A42;">);   </span><span style="color:#A0A1A7;font-style:italic;">// Аналогично с reject</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    }</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">});</span></span></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Использование</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">promise</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    .</span><span style="color:#4078F2;">then</span><span style="color:#383A42;">(result </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">log</span><span style="color:#383A42;">(result);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    })</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    .</span><span style="color:#4078F2;">catch</span><span style="color:#383A42;">(error </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">error</span><span style="color:#383A42;">(error);</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">        console.</span><span style="color:#4078F2;">error</span><span style="color:#383A42;">(error.</span><span style="color:#E45649;">message</span><span style="color:#383A42;">); </span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    })</span></span></span></code></pre></div><h4 id="функция" tabindex="-1"><a class="header-anchor" href="#функция"><span>Функция</span></a></h4><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Объявление</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">function</span><span style="color:#4078F2;"> asyncFunc</span><span style="color:#383A42;">() {</span></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	const</span><span style="color:#986801;"> promise</span><span style="color:#0184BC;"> =</span><span style="color:#A626A4;"> new</span><span style="color:#C18401;"> Promise</span><span style="color:#383A42;">((resolve, reject) </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> {</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">		//</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">	});</span></span></span>
<span class="line"><span class="line"></span></span>
<span class="line"><span class="line"><span style="color:#A626A4;">	return</span><span style="color:#383A42;"> promise;</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">}</span></span></span></code></pre></div><div class="language-javascript" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-javascript;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;">// Использование</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">asyncFunc</span><span style="color:#383A42;">()</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    .</span><span style="color:#4078F2;">then</span><span style="color:#383A42;">(result </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> { </span><span style="color:#0184BC;">...</span><span style="color:#383A42;"> })</span></span></span>
<span class="line"><span class="line"><span style="color:#383A42;">    .</span><span style="color:#4078F2;">catch</span><span style="color:#383A42;">(result </span><span style="color:#A626A4;">=&gt;</span><span style="color:#383A42;"> { </span><span style="color:#0184BC;">...</span><span style="color:#383A42;"> })</span></span></span></code></pre></div>`,16),o=[p];function c(t,r){return a(),n("div",null,o)}const A=s(e,[["render",c],["__file","promise.html.vue"]]),y=JSON.parse('{"path":"/themes/learn/js/async/promise.html","title":"Promise","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Описание","slug":"описание","link":"#описание","children":[]},{"level":3,"title":"Объявление","slug":"объявление","link":"#объявление","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/js/async/promise.md"}');export{A as comp,y as data};
