import{_ as o,r as i,o as r,c as p,d as l,w as a,a as t,b as e,e as s}from"./app-BKXFRN2A.js";const u="/workbook/assets/rebase-DUXvwfjX.jpg",d={},m=t(`<h1 id="перемещение-веток-rebase" tabindex="-1"><a class="header-anchor" href="#перемещение-веток-rebase"><span>Перемещение веток (rebase)</span></a></h1><h3 id="описание" tabindex="-1"><a class="header-anchor" href="#описание"><span>Описание</span></a></h3><ul><li><code>rebase</code> позволяет взять все коммиты из одной ветки и применить их поверх другой</li><li>Выполняет работу аналогичную cherry-pick, только для цепочки коммитов, перенося ветку на новое место</li><li>Коммит, который не даёт изменений называется пустым. rebase автоматически пропускает этот коммит</li></ul><h3 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase"><span><code>rebase</code></span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">git</span> rebase master      <span class="token comment"># rebase</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>  <span class="token comment"># продолжить rebase (вызывается при наличии конфликтов)</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">--skip</span>      <span class="token comment"># пропустить коммит (вызывается при наличии конфликтов)</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>     <span class="token comment"># отменить rebase (возвращает обратно HEAD - не изменит историю коммитов)</span></span>
<span class="line"></span></code></pre></div>`,5),h=e("p",null,[s("Флаг "),e("code",null,"--continue"),s(" позволяет продолжить rebase после фикса конфликта и перейти к следующему коммиту")],-1),g=e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Rebase develop в текущую ветку")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(" rebase develop")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Если есть конфликт, то открывается редактор для фикса")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# После фикса добавляются изменения в staged")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(),e("span",{class:"token function"},"add"),s(),e("span",{class:"token builtin class-name"},".")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Продолжить Rebase и перейти к следующему коммиту")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(" rebase "),e("span",{class:"token parameter variable"},"--continue")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Откроется редактор, где можно изменить название коммита")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# После закрытия редактора Rebase перейдет к следующему коммиту")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Если следующего коммита нет, то Rebase завершится")]),s(`
`),e("span",{class:"line"})])])],-1),b=e("p",null,[s("Флаг "),e("code",null,"--skip"),s(" позволяет пропустить коммит из текущей ветки и взять изменения из "),e("em",null,"develop")],-1),f=e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Rebase develop в текущую ветку")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(" rebase develop")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Если есть конфликт, то открывается редактор для фикса")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Пропустить коммит из текущей ветки и перейти к следующему коммиту")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(" rebase "),e("span",{class:"token parameter variable"},"--skip")]),s(`
`),e("span",{class:"line"})])])],-1),k=e("p",null,[s("Флаг "),e("code",null,"--abort"),s(" позволяет вернусть состояние текушей ветки до rebase."),e("br"),s(" Маркер HEAD, будет перенесен обратно на текущую, а уже добавленные коммиты повиснут в воздухе (на них не будет указывать ни один указатель) и будут вскоре удалены.")],-1),_=e("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"line"},[e("span",{class:"token comment"},"# Rebase develop в текущую ветку")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(" rebase develop")]),s(`
`),e("span",{class:"line"}),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Если есть конфликт, то открывается редактор для фикса")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token comment"},"# Откатиться в состояние до rebase")]),s(`
`),e("span",{class:"line"},[e("span",{class:"token function"},"git"),s(" rebase "),e("span",{class:"token parameter variable"},"--abort")]),s(`
`),e("span",{class:"line"})])])],-1),v=t(`<h3 id="интерактивныи-rebase" tabindex="-1"><a class="header-anchor" href="#интерактивныи-rebase"><span>Интерактивный rebase</span></a></h3><h3 id="rebase-i" tabindex="-1"><a class="header-anchor" href="#rebase-i"><span><code>rebase -i</code></span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token comment"># Интерактивный rebase на другую ветку</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> master</span>
<span class="line"><span class="token comment"># Интерактивный rebase внутри ветки (изменить историю последних 3х коммитов)</span></span>
<span class="line"><span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3</span>
<span class="line"></span></code></pre></div><ul><li>В начала rebase запустится окно редактора, где можно указать определенную команду для каждого коммита</li><li>При этом переписывается история коммитов - у каждого коммита будет новый хеш</li></ul><h4 id="команды" tabindex="-1"><a class="header-anchor" href="#команды"><span>Команды</span></a></h4><ul><li><code>pick</code> (p) - использовать коммит без изменений (по умолчанию)</li><li><code>reword</code> (r) - использовать текущий коммит с возможностью изменения сообщения коммита</li><li><code>drop</code> (d) - удаление коммита (вместо этого можно удалить строку с коммитом)</li><li><code>fixup</code> (f) - будет объединен с предыдущем коммитом в списке, но без изменения сообщения коммита</li></ul><hr><ul><li><code>squash</code> (s) - будет объединен с предыдущем коммитом в списке</li><li><code>edit</code> (e) - отредактировать коммит (когда git дойдёт до коммита, выполнится отстановка и git предложит выполнить действия)</li><li><code>exec</code> (x) - выполнить скрипт для указанного коммита</li><li><code>break</code> (b) - остановиться здесь (продолжить rebase позже с &#39;git rebase --continue&#39;)</li><li><code>label</code> (l) - добавить метку для текущего HEAD с заданным именем</li><li><code>reset</code> (t) - сбросить HEAD до указанной метки</li><li><code>merge</code> (m) - создать merge-commit, используя message исходного merge-commit (или однострочный, если исходный merge-commit не был указан)</li></ul><h3 id="алгоритм-работы" tabindex="-1"><a class="header-anchor" href="#алгоритм-работы"><span>Алгоритм работы</span></a></h3><ul><li>Задача: загрузить изменения из <em>master</em> в <em>feature</em></li></ul>`,10),x=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"0. Подготовка"),e("p",null,[s("Создание ветки "),e("em",null,"feature"),s(" и добавление коммитов в "),e("em",null,"master"),s(" и "),e("em",null,"feature")])],-1),R=e("ul",null,[e("li",null,[e("em",null,"feature"),s(" откалывается от "),e("em",null,"master")]),e("li",null,"В каждую ветку поочередно добавляются коммиты")],-1),w=e("p",null,[e("strong",null,"Порядок коммитов")],-1),D=e("ol",null,[e("li",null,[e("code",null,"master-0"),s(" - master")]),e("li",null,[e("code",null,"feature-1"),s(" - feature")]),e("li",null,[e("code",null,"master-1"),s(" - master")]),e("li",null,[e("code",null,"feature-2"),s(" - feature")]),e("li",null,[e("code",null,"master-2"),s(" - master")])],-1),E=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"1. Rebase"),e("p",null,[s("Создание новой ветки "),e("em",null,"feature'")])],-1),j=e("ul",null,[e("li",null,[s("Создается новая временная ветка "),e("em",null,"feature'"),s(" на основе актуального состояния "),e("em",null,"master")])],-1),A=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"2. Rebase"),e("p",null,[s("Копирование всех коммитов "),e("em",null,"feature"),s(" поверх текущей вершины "),e("em",null,"master"),s(" для временной ветки "),e("em",null,"feature'")])],-1),y=e("ul",null,[e("li",null,[s("Работает аналогично cherry-pick: последовательно берутся изменения каждого коммита из "),e("em",null,"feature"),s(" и применяются к вершине "),e("em",null,"master"),s(": для каждого из коммитов в "),e("em",null,"feature"),s(" берётся его дельта и сохраняется во временный файл")]),e("li",null,"Из каждого временного файла создается новый коммит с тем же автором и описанием, но другим хешем")],-1),H=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"3. Rebase"),e("p",null,[s("Перенос HEAD из ветки "),e("em",null,"feature"),s(" в ветку "),e("em",null,"feature'")])],-1),N=e("ul",null,[e("li",null,[s("После копирования коммитов, ссылка "),e("em",null,"feature"),s(" переносится на вершину новосозданной ветки "),e("em",null,"feature'")]),e("li",null,[s("Теперь ветка "),e("em",null,"feature'"),s(" (копия ветки "),e("em",null,"feature"),s(") основана на последнем состоянии "),e("em",null,"master")])],-1),V=e("img",{src:u,style:{width:"300px"}},null,-1),S=t('<hr><h3 id="задание" tabindex="-1"><a class="header-anchor" href="#задание"><span>Задание</span></a></h3><details class="custom-container details"><summary>Пункты</summary><ol><li>Перейти на ветку <strong>master</strong><ul><li><code>git checkout master</code></li><li>(если вы уже на ветке <strong>master</strong>, то выполнять не нужно)</li></ul></li><li>Создать ветку от <strong>master</strong><ul><li><code>git checkout -b feature</code>, где <code>feature</code> - название ветки</li><li>(команду необходимо выполнять находясь в ветке <strong>master</strong>)</li></ul></li><li>Добавить 1 коммит в ветку <strong>feature</strong><ul><li>Добавить новый файл</li><li><code>git add .</code></li><li><code>git commit -m &#39;Message&#39;</code></li></ul></li><li>Вернуться на ветку <strong>master</strong><ul><li><code>git checkout master</code></li></ul></li><li>Добавить 1 коммит в <strong>master</strong><ul><li>Аналогично как для <strong>feature</strong></li></ul></li><li>Вернуться на ветку <strong>feature</strong><ul><li><code>git checkout feature</code></li></ul></li><li>Актуализировать ветку <strong>feature</strong> с <strong>master</strong><ul><li>Необходимо взять последние изменения с <strong>master</strong> и добавить в <strong>feature</strong></li><li><code>git rebase master</code></li></ul></li><li>Устранение конфликтов rebase <ul><li>Конфликты могут возникнуть, если изменения коснулись одинаковых файлов в <strong>master</strong> и <strong>feature</strong></li><li>При этом IDE (VSCode в моём случае) подсветит конфликтные файлы</li><li><code>git add .</code> - добавить измеенные файлы в staged</li><li><code>git rebase --continue</code> - если несколько коммитов, то преходим к фиксу следующего коммита</li></ul></li></ol></details>',3);function B(C,T){const n=i("v-details"),c=i("v-two");return r(),p("div",null,[m,l(n,{title:"git rebase --continue"},{default:a(()=>[h,g]),_:1}),l(n,{title:"git rebase --skip"},{default:a(()=>[b,f]),_:1}),l(n,{title:"git rebase --abort"},{default:a(()=>[k,_]),_:1}),v,l(c,null,{first:a(()=>[x,R,w,D,E,j,A,y,H,N]),last:a(()=>[V]),_:1}),S])}const X=o(d,[["render",B],["__file","rebase.html.vue"]]),q=JSON.parse('{"path":"/themes/learn/git/themes/rebase.html","title":"Перемещение веток (rebase)","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Описание","slug":"описание","link":"#описание","children":[]},{"level":3,"title":"rebase","slug":"rebase","link":"#rebase","children":[]},{"level":3,"title":"Интерактивный rebase","slug":"интерактивныи-rebase","link":"#интерактивныи-rebase","children":[]},{"level":3,"title":"rebase -i","slug":"rebase-i","link":"#rebase-i","children":[]},{"level":3,"title":"Алгоритм работы","slug":"алгоритм-работы","link":"#алгоритм-работы","children":[]},{"level":3,"title":"Задание","slug":"задание","link":"#задание","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/git/themes/rebase.md"}');export{X as comp,q as data};
