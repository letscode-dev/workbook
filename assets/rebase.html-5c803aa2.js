import{_ as c,r as o,o as r,c as u,d as n,w as s,e as t,a as e,b as a}from"./app-10f0ee09.js";const d="/workbook/assets/rebase-d995faba.jpg",m={},p=t(`<h1 id="перемещение-веток-rebase" tabindex="-1"><a class="header-anchor" href="#перемещение-веток-rebase" aria-hidden="true">#</a> Перемещение веток (rebase)</h1><h3 id="описание" tabindex="-1"><a class="header-anchor" href="#описание" aria-hidden="true">#</a> Описание</h3><ul><li><code>rebase</code> позволяет взять все коммиты из одной ветки и применить их поверх другой</li><li>Выполняет работу аналогичную cherry-pick, только для цепочки коммитов, перенося ветку на новое место</li><li>Коммит, который не даёт изменений называется пустым. rebase автоматически пропускает этот коммит</li></ul><h3 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase" aria-hidden="true">#</a> <code>rebase</code></h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> rebase master      <span class="token comment"># rebase</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--continue</span>  <span class="token comment"># продолжить rebase (вызывается при наличии конфликтов)</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--skip</span>      <span class="token comment"># пропустить коммит (вызывается при наличии конфликтов)</span>
<span class="token function">git</span> rebase <span class="token parameter variable">--abort</span>     <span class="token comment"># отменить rebase (возвращает обратно HEAD - не изменит историю коммитов)</span>
</code></pre></div>`,5),h=e("p",null,[a("Флаг "),e("code",null,"--continue"),a(" позволяет продолжить rebase после фикса конфликта и перейти к следующему коммиту")],-1),b=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# Rebase develop в текущую ветку"),a(`
`),e("span",{class:"token function"},"git"),a(` rebase develop

`),e("span",{class:"token comment"},"# Если есть конфликт, то открывается редактор для фикса"),a(`
`),e("span",{class:"token comment"},"# После фикса добавляются изменения в staged"),a(`
`),e("span",{class:"token function"},"git"),a(),e("span",{class:"token function"},"add"),a(),e("span",{class:"token builtin class-name"},"."),a(`

`),e("span",{class:"token comment"},"# Продолжить Rebase и перейти к следующему коммиту"),a(`
`),e("span",{class:"token function"},"git"),a(" rebase "),e("span",{class:"token parameter variable"},"--continue"),a(`

`),e("span",{class:"token comment"},"# Откроется редактор, где можно изменить название коммита"),a(`
`),e("span",{class:"token comment"},"# После закрытия редактора Rebase перейдет к следующему коммиту"),a(`
`),e("span",{class:"token comment"},"# Если следующего коммита нет, то Rebase завершится"),a(`
`)])])],-1),g=e("p",null,[a("Флаг "),e("code",null,"--skip"),a(" позволяет пропустить коммит из текущей ветки и взять изменения из "),e("em",null,"develop")],-1),f=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# Rebase develop в текущую ветку"),a(`
`),e("span",{class:"token function"},"git"),a(` rebase develop

`),e("span",{class:"token comment"},"# Если есть конфликт, то открывается редактор для фикса"),a(`
`),e("span",{class:"token comment"},"# Пропустить коммит из текущей ветки и перейти к следующему коммиту"),a(`
`),e("span",{class:"token function"},"git"),a(" rebase "),e("span",{class:"token parameter variable"},"--skip"),a(`
`)])])],-1),_=e("p",null,[a("Флаг "),e("code",null,"--abort"),a(" позволяет вернусть состояние текушей ветки до rebase."),e("br"),a(" Маркер HEAD, будет перенесен обратно на текущую, а уже добавленные коммиты повиснут в воздухе (на них не будет указывать ни один указатель) и будут вскоре удалены.")],-1),k=e("div",{class:"language-bash","data-ext":"sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token comment"},"# Rebase develop в текущую ветку"),a(`
`),e("span",{class:"token function"},"git"),a(` rebase develop

`),e("span",{class:"token comment"},"# Если есть конфликт, то открывается редактор для фикса"),a(`
`),e("span",{class:"token comment"},"# Откатиться в состояние до rebase"),a(`
`),e("span",{class:"token function"},"git"),a(" rebase "),e("span",{class:"token parameter variable"},"--abort"),a(`
`)])])],-1),v=t(`<h3 id="интерактивныи-rebase" tabindex="-1"><a class="header-anchor" href="#интерактивныи-rebase" aria-hidden="true">#</a> Интерактивный rebase</h3><h3 id="rebase-i" tabindex="-1"><a class="header-anchor" href="#rebase-i" aria-hidden="true">#</a> <code>rebase -i</code></h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># Интерактивный rebase на другую ветку</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> master
<span class="token comment"># Интерактивный rebase внутри ветки (изменить историю последних 3х коммитов)</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3
</code></pre></div><ul><li>В начала rebase запустится окно редактора, где можно указать определенную команду для каждого коммита</li><li>При этом переписывается история коммитов - у каждого коммита будет новый хеш</li></ul><h4 id="команды" tabindex="-1"><a class="header-anchor" href="#команды" aria-hidden="true">#</a> Команды</h4><ul><li><code>pick</code> (p) - использовать коммит без изменений (по умолчанию)</li><li><code>reword</code> (r) - использовать текущий коммит с возможностью изменения сообщения коммита</li><li><code>drop</code> (d) - удаление коммита (вместо этого можно удалить строку с коммитом)</li><li><code>fixup</code> (f) - будет объединен с предыдущем коммитом в списке, но без изменения сообщения коммита</li></ul><hr><ul><li><code>squash</code> (s) - будет объединен с предыдущем коммитом в списке</li><li><code>edit</code> (e) - отредактировать коммит (когда git дойдёт до коммита, выполнится отстановка и git предложит выполнить действия)</li><li><code>exec</code> (x) - выполнить скрипт для указанного коммита</li><li><code>break</code> (b) - остановиться здесь (продолжить rebase позже с &#39;git rebase --continue&#39;)</li><li><code>label</code> (l) - добавить метку для текущего HEAD с заданным именем</li><li><code>reset</code> (t) - сбросить HEAD до указанной метки</li><li><code>merge</code> (m) - создать merge-commit, используя message исходного merge-commit (или однострочный, если исходный merge-commit не был указан)</li></ul><h3 id="алгоритм-работы" tabindex="-1"><a class="header-anchor" href="#алгоритм-работы" aria-hidden="true">#</a> Алгоритм работы</h3><ul><li>Задача: загрузить изменения из <em>master</em> в <em>feature</em></li></ul>`,10),x=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"0. Подготовка"),e("p",null,[a("Создание ветки "),e("em",null,"feature"),a(" и добавление коммитов в "),e("em",null,"master"),a(" и "),e("em",null,"feature")])],-1),R=e("ul",null,[e("li",null,[e("em",null,"feature"),a(" откалывается от "),e("em",null,"master")]),e("li",null,"В каждую ветку поочередно добавляются коммиты")],-1),E=e("p",null,[e("strong",null,"Порядок коммитов")],-1),w=e("ol",null,[e("li",null,[e("code",null,"master-0"),a(" - master")]),e("li",null,[e("code",null,"feature-1"),a(" - feature")]),e("li",null,[e("code",null,"master-1"),a(" - master")]),e("li",null,[e("code",null,"feature-2"),a(" - feature")]),e("li",null,[e("code",null,"master-2"),a(" - master")])],-1),D=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"1. Rebase"),e("p",null,[a("Создание новой ветки "),e("em",null,"feature'")])],-1),A=e("ul",null,[e("li",null,[a("Создается новая временная ветка "),e("em",null,"feature'"),a(" на основе актуального состояния "),e("em",null,"master")])],-1),H=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"2. Rebase"),e("p",null,[a("Копирование всех коммитов "),e("em",null,"feature"),a(" поверх текущей вершины "),e("em",null,"master"),a(" для временной ветки "),e("em",null,"feature'")])],-1),y=e("ul",null,[e("li",null,[a("Работает аналогично cherry-pick: последовательно берутся изменения каждого коммита из "),e("em",null,"feature"),a(" и применяются к вершине "),e("em",null,"master"),a(": для каждого из коммитов в "),e("em",null,"feature"),a(" берётся его дельта и сохраняется во временный файл")]),e("li",null,"Из каждого временного файла создается новый коммит с тем же автором и описанием, но другим хешем")],-1),V=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"3. Rebase"),e("p",null,[a("Перенос HEAD из ветки "),e("em",null,"feature"),a(" в ветку "),e("em",null,"feature'")])],-1),N=e("ul",null,[e("li",null,[a("После копирования коммитов, ссылка "),e("em",null,"feature"),a(" переносится на вершину новосозданной ветки "),e("em",null,"feature'")]),e("li",null,[a("Теперь ветка "),e("em",null,"feature'"),a(" (копия ветки "),e("em",null,"feature"),a(") основана на последнем состоянии "),e("em",null,"master")])],-1),B=e("img",{src:d,style:{width:"300px"}},null,-1),C=t('<hr><h3 id="задание" tabindex="-1"><a class="header-anchor" href="#задание" aria-hidden="true">#</a> Задание</h3><details class="custom-container details"><summary>Пункты</summary><ol><li>Перейти на ветку <strong>master</strong><ul><li><code>git checkout master</code></li><li>(если вы уже на ветке <strong>master</strong>, то выполнять не нужно)</li></ul></li><li>Создать ветку от <strong>master</strong><ul><li><code>git checkout -b feature</code>, где <code>feature</code> - название ветки</li><li>(команду необходимо выполнять находясь в ветке <strong>master</strong>)</li></ul></li><li>Добавить 1 коммит в ветку <strong>feature</strong><ul><li>Добавить новый файл</li><li><code>git add .</code></li><li><code>git commit -m &#39;Message&#39;</code></li></ul></li><li>Вернуться на ветку <strong>master</strong><ul><li><code>git checkout master</code></li></ul></li><li>Добавить 1 коммит в <strong>master</strong><ul><li>Аналогично как для <strong>feature</strong></li></ul></li><li>Вернуться на ветку <strong>feature</strong><ul><li><code>git checkout feature</code></li></ul></li><li>Актуализировать ветку <strong>feature</strong> с <strong>master</strong><ul><li>Необходимо взять последние изменения с <strong>master</strong> и добавить в <strong>feature</strong></li><li><code>git rebase master</code></li></ul></li><li>Устранение конфликтов rebase <ul><li>Конфликты могут возникнуть, если изменения коснулись одинаковых файлов в <strong>master</strong> и <strong>feature</strong></li><li>При этом IDE (VSCode в моём случае) подсветит конфликтные файлы</li><li><code>git add .</code> - добавить измеенные файлы в staged</li><li><code>git rebase --continue</code> - если несколько коммитов, то преходим к фиксу следующего коммита</li></ul></li></ol></details>',3);function S(j,q){const l=o("v-details"),i=o("v-two");return r(),u("div",null,[p,n(l,{title:"git rebase --continue"},{default:s(()=>[h,b]),_:1}),n(l,{title:"git rebase --skip"},{default:s(()=>[g,f]),_:1}),n(l,{title:"git rebase --abort"},{default:s(()=>[_,k]),_:1}),v,n(i,null,{first:s(()=>[x,R,E,w,D,A,H,y,V,N]),last:s(()=>[B]),_:1}),C])}const M=c(m,[["render",S],["__file","rebase.html.vue"]]);export{M as default};
