import{_ as c,r as o,o as r,c as p,d as a,w as l,a as t,b as s,e}from"./app-Bd0lOKYP.js";const d="/workbook/assets/rebase-DUXvwfjX.jpg",u={},h=t(`<h1 id="перемещение-веток-rebase" tabindex="-1"><a class="header-anchor" href="#перемещение-веток-rebase"><span>Перемещение веток (rebase)</span></a></h1><h3 id="описание" tabindex="-1"><a class="header-anchor" href="#описание"><span>Описание</span></a></h3><ul><li><code>rebase</code> позволяет взять все коммиты из одной ветки и применить их поверх другой</li><li>Выполняет работу аналогичную cherry-pick, только для цепочки коммитов, перенося ветку на новое место</li><li>Коммит, который не даёт изменений называется пустым. rebase автоматически пропускает этот коммит</li></ul><h3 id="rebase" tabindex="-1"><a class="header-anchor" href="#rebase"><span><code>rebase</code></span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-bash;"><code><span class="line"><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> rebase</span><span style="color:#50A14F;"> master</span><span style="color:#A0A1A7;font-style:italic;">      # rebase</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> rebase</span><span style="color:#986801;"> --continue</span><span style="color:#A0A1A7;font-style:italic;">  # продолжить rebase (вызывается при наличии конфликтов)</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> rebase</span><span style="color:#986801;"> --skip</span><span style="color:#A0A1A7;font-style:italic;">      # пропустить коммит (вызывается при наличии конфликтов)</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> rebase</span><span style="color:#986801;"> --abort</span><span style="color:#A0A1A7;font-style:italic;">     # отменить rebase (возвращает обратно HEAD - не изменит историю коммитов)</span></span></span></code></pre></div>`,5),g=s("p",null,[e("Флаг "),s("code",null,"--continue"),e(" позволяет продолжить rebase после фикса конфликта и перейти к следующему коммиту")],-1),m=s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-bash"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Rebase develop в текущую ветку")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," rebase"),s("span",{style:{color:"#50A14F"}}," develop")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Если есть конфликт, то открывается редактор для фикса")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# После фикса добавляются изменения в staged")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," add"),s("span",{style:{color:"#50A14F"}}," .")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Продолжить Rebase и перейти к следующему коммиту")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," rebase"),s("span",{style:{color:"#986801"}}," --continue")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Откроется редактор, где можно изменить название коммита")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# После закрытия редактора Rebase перейдет к следующему коммиту")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Если следующего коммита нет, то Rebase завершится")])])])])],-1),A=s("p",null,[e("Флаг "),s("code",null,"--skip"),e(" позволяет пропустить коммит из текущей ветки и взять изменения из "),s("em",null,"develop")],-1),b=s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-bash"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Rebase develop в текущую ветку")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," rebase"),s("span",{style:{color:"#50A14F"}}," develop")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Если есть конфликт, то открывается редактор для фикса")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Пропустить коммит из текущей ветки и перейти к следующему коммиту")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," rebase"),s("span",{style:{color:"#986801"}}," --skip")])])])])],-1),y=s("p",null,[e("Флаг "),s("code",null,"--abort"),e(" позволяет вернусть состояние текушей ветки до rebase."),s("br"),e(" Маркер HEAD, будет перенесен обратно на текущую, а уже добавленные коммиты повиснут в воздухе (на них не будет указывать ни один указатель) и будут вскоре удалены.")],-1),f=s("div",{class:"language-bash","data-highlighter":"prismjs","data-ext":"sh","data-title":"sh"},[s("pre",{class:"shiki one-light vp-code",style:{"background-color":"#FAFAFA",color:"#383A42 language-bash"}},[s("code",null,[s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Rebase develop в текущую ветку")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," rebase"),s("span",{style:{color:"#50A14F"}}," develop")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"})]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Если есть конфликт, то открывается редактор для фикса")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#A0A1A7","font-style":"italic"}},"# Откатиться в состояние до rebase")])]),e(`
`),s("span",{class:"line"},[s("span",{class:"line"},[s("span",{style:{color:"#4078F2"}},"git"),s("span",{style:{color:"#50A14F"}}," rebase"),s("span",{style:{color:"#986801"}}," --abort")])])])])],-1),_=t(`<h3 id="интерактивныи-rebase" tabindex="-1"><a class="header-anchor" href="#интерактивныи-rebase"><span>Интерактивный rebase</span></a></h3><h3 id="rebase-i" tabindex="-1"><a class="header-anchor" href="#rebase-i"><span><code>rebase -i</code></span></a></h3><div class="language-bash" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="shiki one-light vp-code" style="background-color:#FAFAFA;color:#383A42 language-bash;"><code><span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;"># Интерактивный rebase на другую ветку</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> rebase</span><span style="color:#986801;"> -i</span><span style="color:#50A14F;"> master</span></span></span>
<span class="line"><span class="line"><span style="color:#A0A1A7;font-style:italic;"># Интерактивный rebase внутри ветки (изменить историю последних 3х коммитов)</span></span></span>
<span class="line"><span class="line"><span style="color:#4078F2;">git</span><span style="color:#50A14F;"> rebase</span><span style="color:#986801;"> -i</span><span style="color:#50A14F;"> HEAD~3</span></span></span></code></pre></div><ul><li>В начала rebase запустится окно редактора, где можно указать определенную команду для каждого коммита</li><li>При этом переписывается история коммитов - у каждого коммита будет новый хеш</li></ul><h4 id="команды" tabindex="-1"><a class="header-anchor" href="#команды"><span>Команды</span></a></h4><ul><li><code>pick</code> (p) - использовать коммит без изменений (по умолчанию)</li><li><code>reword</code> (r) - использовать текущий коммит с возможностью изменения сообщения коммита</li><li><code>drop</code> (d) - удаление коммита (вместо этого можно удалить строку с коммитом)</li><li><code>fixup</code> (f) - будет объединен с предыдущем коммитом в списке, но без изменения сообщения коммита</li></ul><hr><ul><li><code>squash</code> (s) - будет объединен с предыдущем коммитом в списке</li><li><code>edit</code> (e) - отредактировать коммит (когда git дойдёт до коммита, выполнится отстановка и git предложит выполнить действия)</li><li><code>exec</code> (x) - выполнить скрипт для указанного коммита</li><li><code>break</code> (b) - остановиться здесь (продолжить rebase позже с &#39;git rebase --continue&#39;)</li><li><code>label</code> (l) - добавить метку для текущего HEAD с заданным именем</li><li><code>reset</code> (t) - сбросить HEAD до указанной метки</li><li><code>merge</code> (m) - создать merge-commit, используя message исходного merge-commit (или однострочный, если исходный merge-commit не был указан)</li></ul><h3 id="алгоритм-работы" tabindex="-1"><a class="header-anchor" href="#алгоритм-работы"><span>Алгоритм работы</span></a></h3><ul><li>Задача: загрузить изменения из <em>master</em> в <em>feature</em></li></ul>`,10),F=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"0. Подготовка"),s("p",null,[e("Создание ветки "),s("em",null,"feature"),e(" и добавление коммитов в "),s("em",null,"master"),e(" и "),s("em",null,"feature")])],-1),v=s("ul",null,[s("li",null,[s("em",null,"feature"),e(" откалывается от "),s("em",null,"master")]),s("li",null,"В каждую ветку поочередно добавляются коммиты")],-1),k=s("p",null,[s("strong",null,"Порядок коммитов")],-1),x=s("ol",null,[s("li",null,[s("code",null,"master-0"),e(" - master")]),s("li",null,[s("code",null,"feature-1"),e(" - feature")]),s("li",null,[s("code",null,"master-1"),e(" - master")]),s("li",null,[s("code",null,"feature-2"),e(" - feature")]),s("li",null,[s("code",null,"master-2"),e(" - master")])],-1),R=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"1. Rebase"),s("p",null,[e("Создание новой ветки "),s("em",null,"feature'")])],-1),w=s("ul",null,[s("li",null,[e("Создается новая временная ветка "),s("em",null,"feature'"),e(" на основе актуального состояния "),s("em",null,"master")])],-1),D=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"2. Rebase"),s("p",null,[e("Копирование всех коммитов "),s("em",null,"feature"),e(" поверх текущей вершины "),s("em",null,"master"),e(" для временной ветки "),s("em",null,"feature'")])],-1),E=s("ul",null,[s("li",null,[e("Работает аналогично cherry-pick: последовательно берутся изменения каждого коммита из "),s("em",null,"feature"),e(" и применяются к вершине "),s("em",null,"master"),e(": для каждого из коммитов в "),s("em",null,"feature"),e(" берётся его дельта и сохраняется во временный файл")]),s("li",null,"Из каждого временного файла создается новый коммит с тем же автором и описанием, но другим хешем")],-1),j=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"3. Rebase"),s("p",null,[e("Перенос HEAD из ветки "),s("em",null,"feature"),e(" в ветку "),s("em",null,"feature'")])],-1),H=s("ul",null,[s("li",null,[e("После копирования коммитов, ссылка "),s("em",null,"feature"),e(" переносится на вершину новосозданной ветки "),s("em",null,"feature'")]),s("li",null,[e("Теперь ветка "),s("em",null,"feature'"),e(" (копия ветки "),s("em",null,"feature"),e(") основана на последнем состоянии "),s("em",null,"master")])],-1),N=s("img",{src:d,style:{width:"300px"}},null,-1),V=t('<hr><h3 id="задание" tabindex="-1"><a class="header-anchor" href="#задание"><span>Задание</span></a></h3><details class="custom-container details"><summary>Пункты</summary><ol><li>Перейти на ветку <strong>master</strong><ul><li><code>git checkout master</code></li><li>(если вы уже на ветке <strong>master</strong>, то выполнять не нужно)</li></ul></li><li>Создать ветку от <strong>master</strong><ul><li><code>git checkout -b feature</code>, где <code>feature</code> - название ветки</li><li>(команду необходимо выполнять находясь в ветке <strong>master</strong>)</li></ul></li><li>Добавить 1 коммит в ветку <strong>feature</strong><ul><li>Добавить новый файл</li><li><code>git add .</code></li><li><code>git commit -m &#39;Message&#39;</code></li></ul></li><li>Вернуться на ветку <strong>master</strong><ul><li><code>git checkout master</code></li></ul></li><li>Добавить 1 коммит в <strong>master</strong><ul><li>Аналогично как для <strong>feature</strong></li></ul></li><li>Вернуться на ветку <strong>feature</strong><ul><li><code>git checkout feature</code></li></ul></li><li>Актуализировать ветку <strong>feature</strong> с <strong>master</strong><ul><li>Необходимо взять последние изменения с <strong>master</strong> и добавить в <strong>feature</strong></li><li><code>git rebase master</code></li></ul></li><li>Устранение конфликтов rebase <ul><li>Конфликты могут возникнуть, если изменения коснулись одинаковых файлов в <strong>master</strong> и <strong>feature</strong></li><li>При этом IDE (VSCode в моём случае) подсветит конфликтные файлы</li><li><code>git add .</code> - добавить измеенные файлы в staged</li><li><code>git rebase --continue</code> - если несколько коммитов, то преходим к фиксу следующего коммита</li></ul></li></ol></details>',3);function S(B,C){const n=o("v-details"),i=o("v-two");return r(),p("div",null,[h,a(n,{title:"git rebase --continue"},{default:l(()=>[g,m]),_:1}),a(n,{title:"git rebase --skip"},{default:l(()=>[A,b]),_:1}),a(n,{title:"git rebase --abort"},{default:l(()=>[y,f]),_:1}),_,a(i,null,{first:l(()=>[F,v,k,x,R,w,D,E,j,H]),last:l(()=>[N]),_:1}),V])}const U=c(u,[["render",S],["__file","rebase.html.vue"]]),X=JSON.parse('{"path":"/themes/learn/git/themes/rebase.html","title":"Перемещение веток (rebase)","lang":"en-US","frontmatter":{},"headers":[{"level":3,"title":"Описание","slug":"описание","link":"#описание","children":[]},{"level":3,"title":"rebase","slug":"rebase","link":"#rebase","children":[]},{"level":3,"title":"Интерактивный rebase","slug":"интерактивныи-rebase","link":"#интерактивныи-rebase","children":[]},{"level":3,"title":"rebase -i","slug":"rebase-i","link":"#rebase-i","children":[]},{"level":3,"title":"Алгоритм работы","slug":"алгоритм-работы","link":"#алгоритм-работы","children":[]},{"level":3,"title":"Задание","slug":"задание","link":"#задание","children":[]}],"git":{"updatedTime":1720968190000,"contributors":[{"name":"Anton","email":"45148047+anton-sergeenkov@users.noreply.github.com","commits":1}]},"filePathRelative":"themes/learn/git/themes/rebase.md"}');export{U as comp,X as data};
