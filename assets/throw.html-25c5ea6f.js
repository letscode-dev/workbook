import{_ as t,o as e,c,f as a,a as x,b as n,e as s}from"./app-1d00ddda.js";const o={},p=x("h1",{id:"обработка-исключении",tabindex:"-1"},[x("a",{class:"header-anchor",href:"#обработка-исключении","aria-hidden":"true"},"#"),n(" Обработка исключений")],-1),l=x("h3",{id:"правила",tabindex:"-1"},[x("a",{class:"header-anchor",href:"#правила","aria-hidden":"true"},"#"),n(" Правила")],-1),u=x("ul",null,[x("li",null,[x("code",null,"catch"),n(" или "),x("code",null,"finally"),n(" может отсутствовать")]),x("li",null,"если ошибка необработана, скрипт не будет выполняться"),x("li",null,[n("если ошибка обработана в "),x("code",null,"catch"),n(", скрипт продолжит выполнение")])],-1),i=x("h3",{id:"конструкция",tabindex:"-1"},[x("a",{class:"header-anchor",href:"#конструкция","aria-hidden":"true"},"#"),n(" Конструкция")],-1),r=s(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token comment">// Инструкции, которые могут бросить исключение</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>идентификатор<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// Инструкции будут выполняться если в try произошло исключение</span>
	<span class="token comment">// передается выражение (идентификатор), которое было в throw</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
	<span class="token comment">// Инструкции будут выполняться независимо от исключения</span>
<span class="token punctuation">}</span>
</code></pre></div>`,1),d=x("h3",{id:"пример",tabindex:"-1"},[x("a",{class:"header-anchor",href:"#пример","aria-hidden":"true"},"#"),n(" Пример")],-1),k=s(`<div class="language-javascript" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Panic!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Код, который нужно выполнить&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>`,1);function h(_,m){return e(),c("div",null,[p,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),l,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),u,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),i,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),r,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),d,a(" xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx "),k])}const y=t(o,[["render",h],["__file","throw.html.vue"]]);export{y as default};
